// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Cashier
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// NegativeLogin - Use 'NegativeLoginParams' to pass parameters into this method.
        /// </summary>
        public void NegativeLogin()
        {
            #region Variable Declarations
            WinEdit uIUsernameEdit = this.UILoginMozillaFirefoxWindow.UILoginDocument.UIUsernameEdit;
            WinEdit uIPasswordEdit = this.UILoginMozillaFirefoxWindow.UILoginDocument.UIPasswordEdit;
            WinButton uILoginButton = this.UILoginMozillaFirefoxWindow.UILoginDocument.UILoginButton;
            #endregion

            // Type 'johan@rmmms.co.za' in 'Username' text box
            uIUsernameEdit.Text = this.NegativeLoginParams.UIUsernameEditText;

            // Click 'Password' text box
            Mouse.Click(uIPasswordEdit, new Point(89, 19));

            // Type '********' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.NegativeLoginParams.UIPasswordEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(36, 23));
        }
        
        /// <summary>
        /// NegativeSecurityScope
        /// </summary>
        public void NegativeSecurityScope()
        {
            #region Variable Declarations
            WinButton uIFinishButton = this.UISelectSecurityScopeMWindow.UISelectSecurityScopeDocument.UIFinishButton;
            #endregion

            // Click 'Finish' button
            Mouse.Click(uIFinishButton, new Point(24, 22));
        }
        
        /// <summary>
        /// OpenCashHouse - Use 'OpenCashHouseParams' to pass parameters into this method.
        /// </summary>
        public void OpenCashHouse()
        {
            #region Variable Declarations
            WinHyperlink uICashierHyperlink = this.UIAdjuvantQACashierMozWindow.UICashierListItem.UICashierHyperlink;
            WinEdit uIOpenCashHouseEdit = this.UIAdjuvantQACashierMozWindow.UIOpenCashHouseHyperlink.UIOpenCashHouseEdit;
            WinEdit uIPleaseprovidenotesEdit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIPleaseprovidenotesEdit;
            WinEdit uIEg30050Edit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEg30050Edit;
            WinControl uISelectAgreementTypefMenuButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UISelectAgreementTypefMenuButton;
            WinListItem uIPolokwaneCashHouseListItem = this.UIAdjuvantQACashierMozWindow.UISelectAgreementTypeEdit.UIPolokwaneCashHouseListItem;
            WinButton uIOpenCashHouseButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIOpenCashHouseButton;
            #endregion

            // Click ' Cashier ' link
            Mouse.Click(uICashierHyperlink, new Point(176, 28));

            // Click 'Open Cash House' text box
            Mouse.Click(uIOpenCashHouseEdit, new Point(55, 12));

            // Type 'Shift + {Tab}' in 'Please provide notes...' text box
            Keyboard.SendKeys(uIPleaseprovidenotesEdit, this.OpenCashHouseParams.UIPleaseprovidenotesEditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Tab}' in 'E.g. 300.50' text box
            Keyboard.SendKeys(uIEg30050Edit, this.OpenCashHouseParams.UIEg30050EditSendKeys, ModifierKeys.Shift);

            // Type '{Down}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.OpenCashHouseParams.UISelectAgreementTypefMenuButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Polokwane Cash House' list item
            Keyboard.SendKeys(uIPolokwaneCashHouseListItem, this.OpenCashHouseParams.UIPolokwaneCashHouseListItemSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.OpenCashHouseParams.UISelectAgreementTypefMenuButtonSendKeys1, ModifierKeys.None);

            // Type 'R 10' in 'E.g. 300.50' text box
            uIEg30050Edit.Text = this.OpenCashHouseParams.UIEg30050EditText;

            // Type '{Tab}' in 'E.g. 300.50' text box
            Keyboard.SendKeys(uIEg30050Edit, this.OpenCashHouseParams.UIEg30050EditSendKeys1, ModifierKeys.None);

            // Type 'test' in 'Please provide notes...' text box
            uIPleaseprovidenotesEdit.Text = this.OpenCashHouseParams.UIPleaseprovidenotesEditText;

            // Type '{Tab}' in 'Please provide notes...' text box
            Keyboard.SendKeys(uIPleaseprovidenotesEdit, this.OpenCashHouseParams.UIPleaseprovidenotesEditSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in 'Open Cash House ' button
            Keyboard.SendKeys(uIOpenCashHouseButton, this.OpenCashHouseParams.UIOpenCashHouseButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// OpenCashDesk - Use 'OpenCashDeskParams' to pass parameters into this method.
        /// </summary>
        public void OpenCashDesk()
        {
            #region Variable Declarations
            WinHyperlink uICashierHyperlink = this.UIAdjuvantQACashierMozWindow.UICashierHomeDepositReListItem.UICashierHyperlink;
            WinHyperlink uICashierHyperlink1 = this.UIAdjuvantQACashierMozWindow.UICashierListItem.UICashierHyperlink;
            WinEdit uIOpenCashDeskEdit = this.UIAdjuvantQACashierMozWindow.UIOpenCashDeskHyperlink.UIOpenCashDeskEdit;
            WinEdit uIEgOpeningcashdeskwitEdit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEgOpeningcashdeskwitEdit;
            WinEdit uIEgR12345Edit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEgR12345Edit;
            WinControl uISelectAgreementTypefMenuButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UISelectAgreementTypefMenuButton;
            WinControl uISelectCashHousefocusMenuButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UISelectCashHousefocusMenuButton;
            WinListItem uIPolokwaneCashHouseListItem = this.UIAdjuvantQACashierMozWindow.UISelectCashHouseEdit.UIPolokwaneCashHouseListItem;
            WinButton uIOpenDeskButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIOpenDeskButton;
            #endregion

            // Click ' Cashier ' link
            Mouse.Click(uICashierHyperlink, new Point(214, 32));

            // Click ' Cashier ' link
            Mouse.Click(uICashierHyperlink1, new Point(200, 26));

            // Click 'Open Cash Desk' text box
            Mouse.Click(uIOpenCashDeskEdit, new Point(73, 8));

            // Type 'Shift + {Tab}' in 'E.g. Opening cash desk with deficit from previous ...' text box
            Keyboard.SendKeys(uIEgOpeningcashdeskwitEdit, this.OpenCashDeskParams.UIEgOpeningcashdeskwitEditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Tab}' in 'E.g. R123.45' text box
            Keyboard.SendKeys(uIEgR12345Edit, this.OpenCashDeskParams.UIEgR12345EditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Tab}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.OpenCashDeskParams.UISelectAgreementTypefMenuButtonSendKeys, ModifierKeys.Shift);

            // Type '{Down}' in 'Select Cash House focus' MenuButton
            Keyboard.SendKeys(uISelectCashHousefocusMenuButton, this.OpenCashDeskParams.UISelectCashHousefocusMenuButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Polokwane Cash House' list item
            Keyboard.SendKeys(uIPolokwaneCashHouseListItem, this.OpenCashDeskParams.UIPolokwaneCashHouseListItemSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Select Cash House focus' MenuButton
            Keyboard.SendKeys(uISelectCashHousefocusMenuButton, this.OpenCashDeskParams.UISelectCashHousefocusMenuButtonSendKeys1, ModifierKeys.None);

            // Type '{Tab}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.OpenCashDeskParams.UISelectAgreementTypefMenuButtonSendKeys1, ModifierKeys.None);

            // Type 'R 1' in 'E.g. R123.45' text box
            uIEgR12345Edit.Text = this.OpenCashDeskParams.UIEgR12345EditText;

            // Type '{Tab}' in 'E.g. R123.45' text box
            Keyboard.SendKeys(uIEgR12345Edit, this.OpenCashDeskParams.UIEgR12345EditSendKeys1, ModifierKeys.None);

            // Type 'test' in 'E.g. Opening cash desk with deficit from previous ...' text box
            uIEgOpeningcashdeskwitEdit.Text = this.OpenCashDeskParams.UIEgOpeningcashdeskwitEditText;

            // Type '{Tab}' in 'E.g. Opening cash desk with deficit from previous ...' text box
            Keyboard.SendKeys(uIEgOpeningcashdeskwitEdit, this.OpenCashDeskParams.UIEgOpeningcashdeskwitEditSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in 'Open Desk ' button
            Keyboard.SendKeys(uIOpenDeskButton, this.OpenCashDeskParams.UIOpenDeskButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// CloseCashHouseWithoutClosingCashDesk - Use 'CloseCashHouseWithoutClosingCashDeskParams' to pass parameters into this method.
        /// </summary>
        public void CloseCashHouseWithoutClosingCashDesk()
        {
            #region Variable Declarations
            WinText uIItemText = this.UIAdjuvantQACashierMozWindow.UICashierHyperlink.UIItemText;
            WinHyperlink uICashierHyperlink = this.UIAdjuvantQACashierMozWindow.UICashierListItem.UICashierHyperlink;
            WinEdit uICloseCashHouseEdit = this.UIAdjuvantQACashierMozWindow.UICloseCashHouseHyperlink.UICloseCashHouseEdit;
            WinEdit uIEgR12345Edit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEgR12345Edit;
            WinEdit uIEgReasonforanydeficiEdit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEgReasonforanydeficiEdit;
            WinButton uICloseCashHouseButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UICloseCashHouseButton;
            #endregion

            // Click '' label
            Mouse.Click(uIItemText, new Point(0, 14));

            // Click ' Cashier ' link
            Mouse.Click(uICashierHyperlink, new Point(205, 27));

            // Click 'Close Cash House' text box
            Mouse.Click(uICloseCashHouseEdit, new Point(59, 3));

            // Type 'R 1' in 'E.g. R123.45' text box
            uIEgR12345Edit.Text = this.CloseCashHouseWithoutClosingCashDeskParams.UIEgR12345EditText;

            // Type '{Tab}' in 'E.g. R123.45' text box
            Keyboard.SendKeys(uIEgR12345Edit, this.CloseCashHouseWithoutClosingCashDeskParams.UIEgR12345EditSendKeys, ModifierKeys.None);

            // Type 'tesg' in 'E.g. Reason for any deficit' text box
            uIEgReasonforanydeficiEdit.Text = this.CloseCashHouseWithoutClosingCashDeskParams.UIEgReasonforanydeficiEditText;

            // Type '{Tab}' in 'E.g. Reason for any deficit' text box
            Keyboard.SendKeys(uIEgReasonforanydeficiEdit, this.CloseCashHouseWithoutClosingCashDeskParams.UIEgReasonforanydeficiEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Close Cash House ' button
            Keyboard.SendKeys(uICloseCashHouseButton, this.CloseCashHouseWithoutClosingCashDeskParams.UICloseCashHouseButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ForceCloseCashDesk - Use 'ForceCloseCashDeskParams' to pass parameters into this method.
        /// </summary>
        public void ForceCloseCashDesk()
        {
            #region Variable Declarations
            WinEdit uIFilterCashDeskSessioEdit = this.UIAdjuvantQACashierMozWindow.UIFilterCashDeskSessioColumnHeader.UIFilterCashDeskSessioEdit;
            WinButton uIForceCloseButton = this.UIAdjuvantQACashierMozWindow.UIItemCell.UIForceCloseButton;
            WinControl uIItemDialog = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIItemDialog;
            WinButton uIItemButton = this.UIAdjuvantQACashierMozWindow.UIItemDialog.UIItemButton;
            WinEdit uIEgR12345Edit = this.UIAdjuvantQACashierMozWindow.UIItemDialog.UIEgR12345Edit;
            WinEdit uIEgReasonforclosingthEdit = this.UIAdjuvantQACashierMozWindow.UIItemDialog.UIEgReasonforclosingthEdit;
            WinButton uIUpdateButton = this.UIAdjuvantQACashierMozWindow.UIItemDialog.UIUpdateButton;
            #endregion

            // Type '{Tab}' in 'Filter Cash Desk Sessions...' text box
            Keyboard.SendKeys(uIFilterCashDeskSessioEdit, this.ForceCloseCashDeskParams.UIFilterCashDeskSessioEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in ' Force Close' button
            Keyboard.SendKeys(uIForceCloseButton, this.ForceCloseCashDeskParams.UIForceCloseButtonSendKeys, ModifierKeys.None);

            // Type '{Tab}' in Dialog
            Keyboard.SendKeys(uIItemDialog, this.ForceCloseCashDeskParams.UIItemDialogSendKeys, ModifierKeys.None);

            // Type '{Tab}' in '×' button
            Keyboard.SendKeys(uIItemButton, this.ForceCloseCashDeskParams.UIItemButtonSendKeys, ModifierKeys.None);

            // Type 'R 1' in 'E.g. R123.45' text box
            uIEgR12345Edit.Text = this.ForceCloseCashDeskParams.UIEgR12345EditText;

            // Type '{Tab}' in 'E.g. R123.45' text box
            Keyboard.SendKeys(uIEgR12345Edit, this.ForceCloseCashDeskParams.UIEgR12345EditSendKeys, ModifierKeys.None);

            // Type 'test' in 'E.g. Reason for closing the session' text box
            uIEgReasonforclosingthEdit.Text = this.ForceCloseCashDeskParams.UIEgReasonforclosingthEditText;

            // Type '{Tab}' in 'E.g. Reason for closing the session' text box
            Keyboard.SendKeys(uIEgReasonforclosingthEdit, this.ForceCloseCashDeskParams.UIEgReasonforclosingthEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Update ' button
            Keyboard.SendKeys(uIUpdateButton, this.ForceCloseCashDeskParams.UIUpdateButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// CloseCashHouse - Use 'CloseCashHouseParams' to pass parameters into this method.
        /// </summary>
        public void CloseCashHouse()
        {
            #region Variable Declarations
            WinEdit uIEgReasonforanydeficiEdit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEgReasonforanydeficiEdit;
            WinButton uICloseCashHouseButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UICloseCashHouseButton;
            #endregion

            // Type '{Tab}' in 'E.g. Reason for any deficit' text box
            Keyboard.SendKeys(uIEgReasonforanydeficiEdit, this.CloseCashHouseParams.UIEgReasonforanydeficiEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Close Cash House ' button
            Keyboard.SendKeys(uICloseCashHouseButton, this.CloseCashHouseParams.UICloseCashHouseButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// LogoutWithoutClosingSessions
        /// </summary>
        public void LogoutWithoutClosingSessions()
        {
            #region Variable Declarations
            WinEdit uIJohanrmmscozaEdit = this.UIAdjuvantQACashierMozWindow.UIJohanrmmscozaHyperlink.UIJohanrmmscozaEdit;
            WinEdit uILogoutEdit = this.UIAdjuvantQACashierMozWindow.UILogoutButton.UILogoutEdit;
            #endregion

            // Click 'johan@rmms.co.za' text box
            Mouse.Click(uIJohanrmmscozaEdit, new Point(31, 14));

            // Click 'Log out' text box
            Mouse.Click(uILogoutEdit, new Point(21, 0));
        }
        
        #region Properties
        public virtual NegativeLoginParams NegativeLoginParams
        {
            get
            {
                if ((this.mNegativeLoginParams == null))
                {
                    this.mNegativeLoginParams = new NegativeLoginParams();
                }
                return this.mNegativeLoginParams;
            }
        }
        
        public virtual OpenCashHouseParams OpenCashHouseParams
        {
            get
            {
                if ((this.mOpenCashHouseParams == null))
                {
                    this.mOpenCashHouseParams = new OpenCashHouseParams();
                }
                return this.mOpenCashHouseParams;
            }
        }
        
        public virtual OpenCashDeskParams OpenCashDeskParams
        {
            get
            {
                if ((this.mOpenCashDeskParams == null))
                {
                    this.mOpenCashDeskParams = new OpenCashDeskParams();
                }
                return this.mOpenCashDeskParams;
            }
        }
        
        public virtual CloseCashHouseWithoutClosingCashDeskParams CloseCashHouseWithoutClosingCashDeskParams
        {
            get
            {
                if ((this.mCloseCashHouseWithoutClosingCashDeskParams == null))
                {
                    this.mCloseCashHouseWithoutClosingCashDeskParams = new CloseCashHouseWithoutClosingCashDeskParams();
                }
                return this.mCloseCashHouseWithoutClosingCashDeskParams;
            }
        }
        
        public virtual ForceCloseCashDeskParams ForceCloseCashDeskParams
        {
            get
            {
                if ((this.mForceCloseCashDeskParams == null))
                {
                    this.mForceCloseCashDeskParams = new ForceCloseCashDeskParams();
                }
                return this.mForceCloseCashDeskParams;
            }
        }
        
        public virtual CloseCashHouseParams CloseCashHouseParams
        {
            get
            {
                if ((this.mCloseCashHouseParams == null))
                {
                    this.mCloseCashHouseParams = new CloseCashHouseParams();
                }
                return this.mCloseCashHouseParams;
            }
        }
        
        public UILoginMozillaFirefoxWindow UILoginMozillaFirefoxWindow
        {
            get
            {
                if ((this.mUILoginMozillaFirefoxWindow == null))
                {
                    this.mUILoginMozillaFirefoxWindow = new UILoginMozillaFirefoxWindow();
                }
                return this.mUILoginMozillaFirefoxWindow;
            }
        }
        
        public UISelectSecurityScopeMWindow UISelectSecurityScopeMWindow
        {
            get
            {
                if ((this.mUISelectSecurityScopeMWindow == null))
                {
                    this.mUISelectSecurityScopeMWindow = new UISelectSecurityScopeMWindow();
                }
                return this.mUISelectSecurityScopeMWindow;
            }
        }
        
        public UIAdjuvantQACashierMozWindow UIAdjuvantQACashierMozWindow
        {
            get
            {
                if ((this.mUIAdjuvantQACashierMozWindow == null))
                {
                    this.mUIAdjuvantQACashierMozWindow = new UIAdjuvantQACashierMozWindow();
                }
                return this.mUIAdjuvantQACashierMozWindow;
            }
        }
        #endregion
        
        #region Fields
        private NegativeLoginParams mNegativeLoginParams;
        
        private OpenCashHouseParams mOpenCashHouseParams;
        
        private OpenCashDeskParams mOpenCashDeskParams;
        
        private CloseCashHouseWithoutClosingCashDeskParams mCloseCashHouseWithoutClosingCashDeskParams;
        
        private ForceCloseCashDeskParams mForceCloseCashDeskParams;
        
        private CloseCashHouseParams mCloseCashHouseParams;
        
        private UILoginMozillaFirefoxWindow mUILoginMozillaFirefoxWindow;
        
        private UISelectSecurityScopeMWindow mUISelectSecurityScopeMWindow;
        
        private UIAdjuvantQACashierMozWindow mUIAdjuvantQACashierMozWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NegativeLogin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class NegativeLoginParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'johan@rmmms.co.za' in 'Username' text box
        /// </summary>
        public string UIUsernameEditText = "johan@rmmms.co.za";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "f1T14ejeC95gueP+zrh8MaGcjwxx5noqf2nwiZY63YM=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenCashHouse'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class OpenCashHouseParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Tab}' in 'Please provide notes...' text box
        /// </summary>
        public string UIPleaseprovidenotesEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Shift + {Tab}' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Down}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Enter}' in 'Polokwane Cash House' list item
        /// </summary>
        public string UIPolokwaneCashHouseListItemSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Tab}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'R 10' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditText = "R 10";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'test' in 'Please provide notes...' text box
        /// </summary>
        public string UIPleaseprovidenotesEditText = "test";
        
        /// <summary>
        /// Type '{Tab}' in 'Please provide notes...' text box
        /// </summary>
        public string UIPleaseprovidenotesEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Open Cash House ' button
        /// </summary>
        public string UIOpenCashHouseButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenCashDesk'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class OpenCashDeskParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Tab}' in 'E.g. Opening cash desk with deficit from previous ...' text box
        /// </summary>
        public string UIEgOpeningcashdeskwitEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Shift + {Tab}' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Shift + {Tab}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Down}' in 'Select Cash House focus' MenuButton
        /// </summary>
        public string UISelectCashHousefocusMenuButtonSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Enter}' in 'Polokwane Cash House' list item
        /// </summary>
        public string UIPolokwaneCashHouseListItemSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Tab}' in 'Select Cash House focus' MenuButton
        /// </summary>
        public string UISelectCashHousefocusMenuButtonSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'R 1' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditText = "R 1";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'test' in 'E.g. Opening cash desk with deficit from previous ...' text box
        /// </summary>
        public string UIEgOpeningcashdeskwitEditText = "test";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. Opening cash desk with deficit from previous ...' text box
        /// </summary>
        public string UIEgOpeningcashdeskwitEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Open Desk ' button
        /// </summary>
        public string UIOpenDeskButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseCashHouseWithoutClosingCashDesk'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CloseCashHouseWithoutClosingCashDeskParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'R 1' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditText = "R 1";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'tesg' in 'E.g. Reason for any deficit' text box
        /// </summary>
        public string UIEgReasonforanydeficiEditText = "tesg";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. Reason for any deficit' text box
        /// </summary>
        public string UIEgReasonforanydeficiEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Close Cash House ' button
        /// </summary>
        public string UICloseCashHouseButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ForceCloseCashDesk'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ForceCloseCashDeskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Tab}' in 'Filter Cash Desk Sessions...' text box
        /// </summary>
        public string UIFilterCashDeskSessioEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in ' Force Close' button
        /// </summary>
        public string UIForceCloseButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Tab}' in Dialog
        /// </summary>
        public string UIItemDialogSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in '×' button
        /// </summary>
        public string UIItemButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'R 1' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditText = "R 1";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'test' in 'E.g. Reason for closing the session' text box
        /// </summary>
        public string UIEgReasonforclosingthEditText = "test";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. Reason for closing the session' text box
        /// </summary>
        public string UIEgReasonforclosingthEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Update ' button
        /// </summary>
        public string UIUpdateButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseCashHouse'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CloseCashHouseParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Tab}' in 'E.g. Reason for any deficit' text box
        /// </summary>
        public string UIEgReasonforanydeficiEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Close Cash House ' button
        /// </summary>
        public string UICloseCashHouseButtonSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginMozillaFirefoxWindow : WinWindow
    {
        
        public UILoginMozillaFirefoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "| Log in - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("| Log in - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UILoginDocument UILoginDocument
        {
            get
            {
                if ((this.mUILoginDocument == null))
                {
                    this.mUILoginDocument = new UILoginDocument(this);
                }
                return this.mUILoginDocument;
            }
        }
        #endregion
        
        #region Fields
        private UILoginDocument mUILoginDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginDocument : WinControl
    {
        
        public UILoginDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "| Log in";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("| Log in - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Username";
                    this.mUIUsernameEdit.WindowTitles.Add("| Log in - Mozilla Firefox");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public WinEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.WindowTitles.Add("| Log in - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public WinButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WinButton.PropertyNames.Name] = "Login";
                    this.mUILoginButton.WindowTitles.Add("| Log in - Mozilla Firefox");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUsernameEdit;
        
        private WinEdit mUIPasswordEdit;
        
        private WinButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectSecurityScopeMWindow : WinWindow
    {
        
        public UISelectSecurityScopeMWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "| Select Security Scope - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("| Select Security Scope - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UISelectSecurityScopeDocument UISelectSecurityScopeDocument
        {
            get
            {
                if ((this.mUISelectSecurityScopeDocument == null))
                {
                    this.mUISelectSecurityScopeDocument = new UISelectSecurityScopeDocument(this);
                }
                return this.mUISelectSecurityScopeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UISelectSecurityScopeDocument mUISelectSecurityScopeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectSecurityScopeDocument : WinControl
    {
        
        public UISelectSecurityScopeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "| Select Security Scope";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("| Select Security Scope - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UIFinishButton
        {
            get
            {
                if ((this.mUIFinishButton == null))
                {
                    this.mUIFinishButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFinishButton.SearchProperties[WinButton.PropertyNames.Name] = "Finish";
                    this.mUIFinishButton.WindowTitles.Add("| Select Security Scope - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinishButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFinishButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAdjuvantQACashierMozWindow : WinWindow
    {
        
        public UIAdjuvantQACashierMozWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Adjuvant QA | Cashier - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UICashierListItem UICashierListItem
        {
            get
            {
                if ((this.mUICashierListItem == null))
                {
                    this.mUICashierListItem = new UICashierListItem(this);
                }
                return this.mUICashierListItem;
            }
        }
        
        public UIOpenCashHouseHyperlink UIOpenCashHouseHyperlink
        {
            get
            {
                if ((this.mUIOpenCashHouseHyperlink == null))
                {
                    this.mUIOpenCashHouseHyperlink = new UIOpenCashHouseHyperlink(this);
                }
                return this.mUIOpenCashHouseHyperlink;
            }
        }
        
        public UIAdjuvantQACashierDocument UIAdjuvantQACashierDocument
        {
            get
            {
                if ((this.mUIAdjuvantQACashierDocument == null))
                {
                    this.mUIAdjuvantQACashierDocument = new UIAdjuvantQACashierDocument(this);
                }
                return this.mUIAdjuvantQACashierDocument;
            }
        }
        
        public UISelectAgreementTypeEdit UISelectAgreementTypeEdit
        {
            get
            {
                if ((this.mUISelectAgreementTypeEdit == null))
                {
                    this.mUISelectAgreementTypeEdit = new UISelectAgreementTypeEdit(this);
                }
                return this.mUISelectAgreementTypeEdit;
            }
        }
        
        public UICashierHomeDepositReListItem UICashierHomeDepositReListItem
        {
            get
            {
                if ((this.mUICashierHomeDepositReListItem == null))
                {
                    this.mUICashierHomeDepositReListItem = new UICashierHomeDepositReListItem(this);
                }
                return this.mUICashierHomeDepositReListItem;
            }
        }
        
        public UIOpenCashDeskHyperlink UIOpenCashDeskHyperlink
        {
            get
            {
                if ((this.mUIOpenCashDeskHyperlink == null))
                {
                    this.mUIOpenCashDeskHyperlink = new UIOpenCashDeskHyperlink(this);
                }
                return this.mUIOpenCashDeskHyperlink;
            }
        }
        
        public UISelectCashHouseEdit UISelectCashHouseEdit
        {
            get
            {
                if ((this.mUISelectCashHouseEdit == null))
                {
                    this.mUISelectCashHouseEdit = new UISelectCashHouseEdit(this);
                }
                return this.mUISelectCashHouseEdit;
            }
        }
        
        public UICashierHyperlink UICashierHyperlink
        {
            get
            {
                if ((this.mUICashierHyperlink == null))
                {
                    this.mUICashierHyperlink = new UICashierHyperlink(this);
                }
                return this.mUICashierHyperlink;
            }
        }
        
        public UICloseCashHouseHyperlink UICloseCashHouseHyperlink
        {
            get
            {
                if ((this.mUICloseCashHouseHyperlink == null))
                {
                    this.mUICloseCashHouseHyperlink = new UICloseCashHouseHyperlink(this);
                }
                return this.mUICloseCashHouseHyperlink;
            }
        }
        
        public UIFilterCashDeskSessioColumnHeader UIFilterCashDeskSessioColumnHeader
        {
            get
            {
                if ((this.mUIFilterCashDeskSessioColumnHeader == null))
                {
                    this.mUIFilterCashDeskSessioColumnHeader = new UIFilterCashDeskSessioColumnHeader(this);
                }
                return this.mUIFilterCashDeskSessioColumnHeader;
            }
        }
        
        public UIItemCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new UIItemCell(this);
                }
                return this.mUIItemCell;
            }
        }
        
        public UIItemDialog UIItemDialog
        {
            get
            {
                if ((this.mUIItemDialog == null))
                {
                    this.mUIItemDialog = new UIItemDialog(this);
                }
                return this.mUIItemDialog;
            }
        }
        
        public UIJohanrmmscozaHyperlink UIJohanrmmscozaHyperlink
        {
            get
            {
                if ((this.mUIJohanrmmscozaHyperlink == null))
                {
                    this.mUIJohanrmmscozaHyperlink = new UIJohanrmmscozaHyperlink(this);
                }
                return this.mUIJohanrmmscozaHyperlink;
            }
        }
        
        public UILogoutButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new UILogoutButton(this);
                }
                return this.mUILogoutButton;
            }
        }
        #endregion
        
        #region Fields
        private UICashierListItem mUICashierListItem;
        
        private UIOpenCashHouseHyperlink mUIOpenCashHouseHyperlink;
        
        private UIAdjuvantQACashierDocument mUIAdjuvantQACashierDocument;
        
        private UISelectAgreementTypeEdit mUISelectAgreementTypeEdit;
        
        private UICashierHomeDepositReListItem mUICashierHomeDepositReListItem;
        
        private UIOpenCashDeskHyperlink mUIOpenCashDeskHyperlink;
        
        private UISelectCashHouseEdit mUISelectCashHouseEdit;
        
        private UICashierHyperlink mUICashierHyperlink;
        
        private UICloseCashHouseHyperlink mUICloseCashHouseHyperlink;
        
        private UIFilterCashDeskSessioColumnHeader mUIFilterCashDeskSessioColumnHeader;
        
        private UIItemCell mUIItemCell;
        
        private UIItemDialog mUIItemDialog;
        
        private UIJohanrmmscozaHyperlink mUIJohanrmmscozaHyperlink;
        
        private UILogoutButton mUILogoutButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICashierListItem : WinListItem
    {
        
        public UICashierListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = " Cashier ";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UICashierHyperlink
        {
            get
            {
                if ((this.mUICashierHyperlink == null))
                {
                    this.mUICashierHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUICashierHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = " Cashier ";
                    this.mUICashierHyperlink.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUICashierHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUICashierHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenCashHouseHyperlink : WinHyperlink
    {
        
        public UIOpenCashHouseHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = " Open Cash House";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenCashHouseEdit
        {
            get
            {
                if ((this.mUIOpenCashHouseEdit == null))
                {
                    this.mUIOpenCashHouseEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenCashHouseEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open Cash House";
                    this.mUIOpenCashHouseEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIOpenCashHouseEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenCashHouseEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAdjuvantQACashierDocument : WinControl
    {
        
        public UIAdjuvantQACashierDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Adjuvant QA | Cashier";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIPleaseprovidenotesEdit
        {
            get
            {
                if ((this.mUIPleaseprovidenotesEdit == null))
                {
                    this.mUIPleaseprovidenotesEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPleaseprovidenotesEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Please provide notes...";
                    this.mUIPleaseprovidenotesEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPleaseprovidenotesEdit;
            }
        }
        
        public WinEdit UIEg30050Edit
        {
            get
            {
                if ((this.mUIEg30050Edit == null))
                {
                    this.mUIEg30050Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEg30050Edit.SearchProperties[WinEdit.PropertyNames.Name] = "E.g. 300.50";
                    this.mUIEg30050Edit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEg30050Edit;
            }
        }
        
        public WinControl UISelectAgreementTypefMenuButton
        {
            get
            {
                if ((this.mUISelectAgreementTypefMenuButton == null))
                {
                    this.mUISelectAgreementTypefMenuButton = new WinControl(this);
                    #region Search Criteria
                    this.mUISelectAgreementTypefMenuButton.SearchProperties[UITestControl.PropertyNames.Name] = "Select Agreement Type focus";
                    this.mUISelectAgreementTypefMenuButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "MenuButton";
                    this.mUISelectAgreementTypefMenuButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUISelectAgreementTypefMenuButton;
            }
        }
        
        public WinButton UIOpenCashHouseButton
        {
            get
            {
                if ((this.mUIOpenCashHouseButton == null))
                {
                    this.mUIOpenCashHouseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenCashHouseButton.SearchProperties[WinButton.PropertyNames.Name] = "Open Cash House ";
                    this.mUIOpenCashHouseButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIOpenCashHouseButton;
            }
        }
        
        public WinEdit UIEgOpeningcashdeskwitEdit
        {
            get
            {
                if ((this.mUIEgOpeningcashdeskwitEdit == null))
                {
                    this.mUIEgOpeningcashdeskwitEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEgOpeningcashdeskwitEdit.SearchProperties[WinEdit.PropertyNames.Name] = "E.g. Opening cash desk with deficit from previous session";
                    this.mUIEgOpeningcashdeskwitEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEgOpeningcashdeskwitEdit;
            }
        }
        
        public WinEdit UIEgR12345Edit
        {
            get
            {
                if ((this.mUIEgR12345Edit == null))
                {
                    this.mUIEgR12345Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEgR12345Edit.SearchProperties[WinEdit.PropertyNames.Name] = "E.g. R123.45";
                    this.mUIEgR12345Edit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEgR12345Edit;
            }
        }
        
        public WinControl UISelectCashHousefocusMenuButton
        {
            get
            {
                if ((this.mUISelectCashHousefocusMenuButton == null))
                {
                    this.mUISelectCashHousefocusMenuButton = new WinControl(this);
                    #region Search Criteria
                    this.mUISelectCashHousefocusMenuButton.SearchProperties[UITestControl.PropertyNames.Name] = "Select Cash House focus";
                    this.mUISelectCashHousefocusMenuButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "MenuButton";
                    this.mUISelectCashHousefocusMenuButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUISelectCashHousefocusMenuButton;
            }
        }
        
        public WinButton UIOpenDeskButton
        {
            get
            {
                if ((this.mUIOpenDeskButton == null))
                {
                    this.mUIOpenDeskButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenDeskButton.SearchProperties[WinButton.PropertyNames.Name] = "Open Desk ";
                    this.mUIOpenDeskButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIOpenDeskButton;
            }
        }
        
        public WinEdit UIEgReasonforanydeficiEdit
        {
            get
            {
                if ((this.mUIEgReasonforanydeficiEdit == null))
                {
                    this.mUIEgReasonforanydeficiEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEgReasonforanydeficiEdit.SearchProperties[WinEdit.PropertyNames.Name] = "E.g. Reason for any deficit";
                    this.mUIEgReasonforanydeficiEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEgReasonforanydeficiEdit;
            }
        }
        
        public WinButton UICloseCashHouseButton
        {
            get
            {
                if ((this.mUICloseCashHouseButton == null))
                {
                    this.mUICloseCashHouseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseCashHouseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close Cash House ";
                    this.mUICloseCashHouseButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUICloseCashHouseButton;
            }
        }
        
        public WinControl UIItemDialog
        {
            get
            {
                if ((this.mUIItemDialog == null))
                {
                    this.mUIItemDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIItemDialog.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIPleaseprovidenotesEdit;
        
        private WinEdit mUIEg30050Edit;
        
        private WinControl mUISelectAgreementTypefMenuButton;
        
        private WinButton mUIOpenCashHouseButton;
        
        private WinEdit mUIEgOpeningcashdeskwitEdit;
        
        private WinEdit mUIEgR12345Edit;
        
        private WinControl mUISelectCashHousefocusMenuButton;
        
        private WinButton mUIOpenDeskButton;
        
        private WinEdit mUIEgReasonforanydeficiEdit;
        
        private WinButton mUICloseCashHouseButton;
        
        private WinControl mUIItemDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectAgreementTypeEdit : WinEdit
    {
        
        public UISelectAgreementTypeEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Select Agreement Type";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinListItem UIPolokwaneCashHouseListItem
        {
            get
            {
                if ((this.mUIPolokwaneCashHouseListItem == null))
                {
                    this.mUIPolokwaneCashHouseListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIPolokwaneCashHouseListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Polokwane Cash House";
                    this.mUIPolokwaneCashHouseListItem.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPolokwaneCashHouseListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIPolokwaneCashHouseListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICashierHomeDepositReListItem : WinListItem
    {
        
        public UICashierHomeDepositReListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = @" Cashier   Home Deposit Refund Reprint Slips Create Buyer Buyer Search Open Cash Desk Close Cash Desk Cash Drop Take Break End Break Open Cash House Close Cash House Bag Drop Manual Bag Drop Buyer Statement Buyer Sales Summary Invoice Report Cash house / Cash ups";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UICashierHyperlink
        {
            get
            {
                if ((this.mUICashierHyperlink == null))
                {
                    this.mUICashierHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUICashierHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = " Cashier ";
                    this.mUICashierHyperlink.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUICashierHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUICashierHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenCashDeskHyperlink : WinHyperlink
    {
        
        public UIOpenCashDeskHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = " Open Cash Desk";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenCashDeskEdit
        {
            get
            {
                if ((this.mUIOpenCashDeskEdit == null))
                {
                    this.mUIOpenCashDeskEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenCashDeskEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open Cash Desk";
                    this.mUIOpenCashDeskEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIOpenCashDeskEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenCashDeskEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectCashHouseEdit : WinEdit
    {
        
        public UISelectCashHouseEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Select Cash House";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinListItem UIPolokwaneCashHouseListItem
        {
            get
            {
                if ((this.mUIPolokwaneCashHouseListItem == null))
                {
                    this.mUIPolokwaneCashHouseListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIPolokwaneCashHouseListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Polokwane Cash House";
                    this.mUIPolokwaneCashHouseListItem.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPolokwaneCashHouseListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIPolokwaneCashHouseListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICashierHyperlink : WinHyperlink
    {
        
        public UICashierHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = " Cashier ";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinText UIItemText
        {
            get
            {
                if ((this.mUIItemText == null))
                {
                    this.mUIItemText = new WinText(this);
                    #region Search Criteria
                    this.mUIItemText.SearchProperties[WinText.PropertyNames.Name] = "";
                    this.mUIItemText.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItemText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICloseCashHouseHyperlink : WinHyperlink
    {
        
        public UICloseCashHouseHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = " Close Cash House";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UICloseCashHouseEdit
        {
            get
            {
                if ((this.mUICloseCashHouseEdit == null))
                {
                    this.mUICloseCashHouseEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICloseCashHouseEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Close Cash House";
                    this.mUICloseCashHouseEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUICloseCashHouseEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICloseCashHouseEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFilterCashDeskSessioColumnHeader : WinColumnHeader
    {
        
        public UIFilterCashDeskSessioColumnHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Filter Cash Desk Sessions...";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilterCashDeskSessioEdit
        {
            get
            {
                if ((this.mUIFilterCashDeskSessioEdit == null))
                {
                    this.mUIFilterCashDeskSessioEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilterCashDeskSessioEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Filter Cash Desk Sessions...";
                    this.mUIFilterCashDeskSessioEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFilterCashDeskSessioEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilterCashDeskSessioEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCell : WinCell
    {
        
        public UIItemCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UIForceCloseButton
        {
            get
            {
                if ((this.mUIForceCloseButton == null))
                {
                    this.mUIForceCloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIForceCloseButton.SearchProperties[WinButton.PropertyNames.Name] = " Force Close";
                    this.mUIForceCloseButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIForceCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIForceCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemDialog : WinControl
    {
        
        public UIItemDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "×";
                    this.mUIItemButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WinEdit UIEgR12345Edit
        {
            get
            {
                if ((this.mUIEgR12345Edit == null))
                {
                    this.mUIEgR12345Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEgR12345Edit.SearchProperties[WinEdit.PropertyNames.Name] = "E.g. R123.45";
                    this.mUIEgR12345Edit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEgR12345Edit;
            }
        }
        
        public WinEdit UIEgReasonforclosingthEdit
        {
            get
            {
                if ((this.mUIEgReasonforclosingthEdit == null))
                {
                    this.mUIEgReasonforclosingthEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEgReasonforclosingthEdit.SearchProperties[WinEdit.PropertyNames.Name] = "E.g. Reason for closing the session";
                    this.mUIEgReasonforclosingthEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEgReasonforclosingthEdit;
            }
        }
        
        public WinButton UIUpdateButton
        {
            get
            {
                if ((this.mUIUpdateButton == null))
                {
                    this.mUIUpdateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUpdateButton.SearchProperties[WinButton.PropertyNames.Name] = "Update ";
                    this.mUIUpdateButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIUpdateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        
        private WinEdit mUIEgR12345Edit;
        
        private WinEdit mUIEgReasonforclosingthEdit;
        
        private WinButton mUIUpdateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIJohanrmmscozaHyperlink : WinHyperlink
    {
        
        public UIJohanrmmscozaHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = " johan@rmms.co.za ";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIJohanrmmscozaEdit
        {
            get
            {
                if ((this.mUIJohanrmmscozaEdit == null))
                {
                    this.mUIJohanrmmscozaEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIJohanrmmscozaEdit.SearchProperties[WinEdit.PropertyNames.Name] = "johan@rmms.co.za ";
                    this.mUIJohanrmmscozaEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIJohanrmmscozaEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIJohanrmmscozaEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILogoutButton : WinButton
    {
        
        public UILogoutButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinButton.PropertyNames.Name] = "Log out";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UILogoutEdit
        {
            get
            {
                if ((this.mUILogoutEdit == null))
                {
                    this.mUILogoutEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILogoutEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Log out";
                    this.mUILogoutEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUILogoutEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUILogoutEdit;
        #endregion
    }
}
