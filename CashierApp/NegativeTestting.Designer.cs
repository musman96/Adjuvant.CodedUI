// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CashierApp.NegativeTesttingClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class NegativeTestting
    {
        
        /// <summary>
        /// NegativeLogin - Use 'NegativeLoginParams' to pass parameters into this method.
        /// </summary>
        public void NegativeLogin()
        {
            #region Variable Declarations
            WinEdit uIUsernameEdit = this.UILoginMozillaFirefoxWindow.UILoginDocument.UIUsernameEdit;
            WinEdit uIPasswordEdit = this.UILoginMozillaFirefoxWindow.UILoginDocument.UIPasswordEdit;
            WinButton uILoginButton = this.UILoginMozillaFirefoxWindow.UILoginDocument.UILoginButton;
            #endregion

            // Type 'anes.harris@fgxplatform.com' in 'Username' text box
            uIUsernameEdit.Text = this.NegativeLoginParams.UIUsernameEditText;

            // Click 'Password' text box
            Mouse.Click(uIPasswordEdit, new Point(122, 13));

            // Type '********' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.NegativeLoginParams.UIPasswordEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(18, 13));
        }
        
        /// <summary>
        /// NegativeSecurityScope
        /// </summary>
        public void NegativeSecurityScope()
        {
            #region Variable Declarations
            WinButton uIFinishButton = this.UISelectSecurityScopeMWindow.UISelectSecurityScopeDocument.UIFinishButton;
            #endregion

            // Click 'Finish' button
            Mouse.Click(uIFinishButton, new Point(22, 12));
        }
        
        /// <summary>
        /// OpenCashDeskWithoutCashHouse
        /// </summary>
        public void OpenCashDeskWithoutCashHouse()
        {
            #region Variable Declarations
            WinEdit uICashierEdit = this.UIAdjuvantQAHomeMozillWindow.UICashierHyperlink.UICashierEdit;
            WinEdit uIOpenCashDeskEdit = this.UIAdjuvantQAHomeMozillWindow.UIOpenCashDeskHyperlink.UIOpenCashDeskEdit;
            #endregion

            // Click 'Cashier' text box
            Mouse.Click(uICashierEdit, new Point(39, 16));

            // Click 'Open Cash Desk' text box
            Mouse.Click(uIOpenCashDeskEdit, new Point(60, 17));
        }
        
        /// <summary>
        /// OpenCashHouse - Use 'OpenCashHouseParams' to pass parameters into this method.
        /// </summary>
        public void OpenCashHouse()
        {
            #region Variable Declarations
            WinEdit uIOpenCashHouseEdit = this.UIAdjuvantQACashierMozWindow.UIOpenCashHouseHyperlink.UIOpenCashHouseEdit;
            WinHyperlink uIJohanrmmscozaHyperlink = this.UIAdjuvantQACashierMozWindow.UIJohanrmmscozaChangeSListItem.UIJohanrmmscozaHyperlink;
            WinControl uIAdjuvantQACashierDocument = this.UIAdjuvantQACashierMozWindow.UIItemPropertyPage.UIAdjuvantQACashierDocument;
            WinControl uISelectAgreementTypefMenuButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UISelectAgreementTypefMenuButton;
            WinListItem uIPolokwaneCashHouseListItem = this.UIAdjuvantQACashierMozWindow.UISelectAgreementTypeEdit.UIPolokwaneCashHouseListItem;
            WinEdit uIEg30050Edit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEg30050Edit;
            WinEdit uIPleaseprovidenotesEdit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIPleaseprovidenotesEdit;
            WinButton uIOpenCashHouseButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIOpenCashHouseButton;
            #endregion

            // Click 'Open Cash House' text box
            Mouse.Click(uIOpenCashHouseEdit, new Point(60, 10));

            // Click ' johan@rmms.co.za ' link
            Mouse.Click(uIJohanrmmscozaHyperlink, new Point(59, 3));

            // Type '{Tab}' in 'Adjuvant QA | Cashier' document
            Keyboard.SendKeys(uIAdjuvantQACashierDocument, this.OpenCashHouseParams.UIAdjuvantQACashierDocumentSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.OpenCashHouseParams.UISelectAgreementTypefMenuButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Polokwane Cash House' list item
            Keyboard.SendKeys(uIPolokwaneCashHouseListItem, this.OpenCashHouseParams.UIPolokwaneCashHouseListItemSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.OpenCashHouseParams.UISelectAgreementTypefMenuButtonSendKeys1, ModifierKeys.None);

            // Type 'R 1 000 644' in 'E.g. 300.50' text box
            uIEg30050Edit.Text = this.OpenCashHouseParams.UIEg30050EditText;

            // Type '{Tab}' in 'E.g. 300.50' text box
            Keyboard.SendKeys(uIEg30050Edit, this.OpenCashHouseParams.UIEg30050EditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Please provide notes...' text box
            Keyboard.SendKeys(uIPleaseprovidenotesEdit, this.OpenCashHouseParams.UIPleaseprovidenotesEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Open Cash House ' button
            Keyboard.SendKeys(uIOpenCashHouseButton, this.OpenCashHouseParams.UIOpenCashHouseButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// OpenCashHouse1 - Use 'OpenCashHouse1Params' to pass parameters into this method.
        /// </summary>
        public void OpenCashHouse1()
        {
            #region Variable Declarations
            WinHyperlink uICashierHyperlink = this.UIAdjuvantQACashierMozWindow.UICashierListItem.UICashierHyperlink;
            WinEdit uIOpenCashHouseEdit = this.UIAdjuvantQACashierMozWindow.UIOpenCashHouseHyperlink.UIOpenCashHouseEdit;
            WinEdit uIPleaseprovidenotesEdit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIPleaseprovidenotesEdit;
            WinEdit uIEg30050Edit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEg30050Edit;
            WinControl uISelectAgreementTypefMenuButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UISelectAgreementTypefMenuButton;
            WinListItem uIPolokwaneCashHouseListItem = this.UIAdjuvantQACashierMozWindow.UISelectAgreementTypeEdit.UIPolokwaneCashHouseListItem;
            WinButton uIOpenCashHouseButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIOpenCashHouseButton;
            #endregion

            // Click ' Cashier ' link
            Mouse.Click(uICashierHyperlink, new Point(202, 22));

            // Click 'Open Cash House' text box
            Mouse.Click(uIOpenCashHouseEdit, new Point(83, 10));

            // Type 'Shift + {Tab}' in 'Please provide notes...' text box
            Keyboard.SendKeys(uIPleaseprovidenotesEdit, this.OpenCashHouse1Params.UIPleaseprovidenotesEditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Tab}' in 'E.g. 300.50' text box
            Keyboard.SendKeys(uIEg30050Edit, this.OpenCashHouse1Params.UIEg30050EditSendKeys, ModifierKeys.Shift);

            // Type '{Down}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.OpenCashHouse1Params.UISelectAgreementTypefMenuButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Polokwane Cash House' list item
            Keyboard.SendKeys(uIPolokwaneCashHouseListItem, this.OpenCashHouse1Params.UIPolokwaneCashHouseListItemSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.OpenCashHouse1Params.UISelectAgreementTypefMenuButtonSendKeys1, ModifierKeys.None);

            // Type 'R 10 000' in 'E.g. 300.50' text box
            uIEg30050Edit.Text = this.OpenCashHouse1Params.UIEg30050EditText;

            // Type '{Tab}' in 'E.g. 300.50' text box
            Keyboard.SendKeys(uIEg30050Edit, this.OpenCashHouse1Params.UIEg30050EditSendKeys1, ModifierKeys.None);

            // Type 'test' in 'Please provide notes...' text box
            uIPleaseprovidenotesEdit.Text = this.OpenCashHouse1Params.UIPleaseprovidenotesEditText;

            // Type '{Tab}' in 'Please provide notes...' text box
            Keyboard.SendKeys(uIPleaseprovidenotesEdit, this.OpenCashHouse1Params.UIPleaseprovidenotesEditSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in 'Open Cash House ' button
            Keyboard.SendKeys(uIOpenCashHouseButton, this.OpenCashHouse1Params.UIOpenCashHouseButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// CloseCashHouseWithoutClosingCashDesk - Use 'CloseCashHouseWithoutClosingCashDeskParams' to pass parameters into this method.
        /// </summary>
        public void CloseCashHouseWithoutClosingCashDesk()
        {
            #region Variable Declarations
            WinHyperlink uICashierHyperlink = this.UIAdjuvantQACashierMozWindow.UICashierListItem.UICashierHyperlink;
            WinEdit uICloseCashHouseEdit = this.UIAdjuvantQACashierMozWindow.UICloseCashHouseHyperlink.UICloseCashHouseEdit;
            WinEdit uIItemEdit = this.UIAdjuvantQACashierMozWindow.UICashHouseText.UIItemEdit;
            WinEdit uICashHouseEdit = this.UIAdjuvantQACashierMozWindow.UICashHouseText.UICashHouseEdit;
            WinControl uIAdjuvantQACashierDocument = this.UIAdjuvantQACashierMozWindow.UIItemPropertyPage.UIAdjuvantQACashierDocument;
            WinControl uISelectAgreementTypefMenuButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UISelectAgreementTypefMenuButton;
            WinListItem uIPolokwaneCashHouseListItem = this.UIAdjuvantQACashierMozWindow.UISelectAgreementTypeEdit.UIPolokwaneCashHouseListItem;
            WinEdit uIEgR12345Edit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEgR12345Edit;
            WinEdit uIEgReasonforanydeficiEdit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEgReasonforanydeficiEdit;
            WinButton uICloseCashHouseButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UICloseCashHouseButton;
            #endregion

            // Click ' Cashier ' link
            Mouse.Click(uICashierHyperlink, new Point(127, 34));

            // Click 'Close Cash House' text box
            Mouse.Click(uICloseCashHouseEdit, new Point(30, 6));

            // Move '*' text box to 'Cash House' text box
            uICashHouseEdit.EnsureClickable(new Point(51, 15));
            Mouse.StartDragging(uIItemEdit, new Point(4, 10));
            Mouse.StopDragging(uICashHouseEdit, new Point(51, 15));

            // Type '{Tab}' in 'Adjuvant QA | Cashier' document
            Keyboard.SendKeys(uIAdjuvantQACashierDocument, this.CloseCashHouseWithoutClosingCashDeskParams.UIAdjuvantQACashierDocumentSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.CloseCashHouseWithoutClosingCashDeskParams.UISelectAgreementTypefMenuButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Polokwane Cash House' list item
            Keyboard.SendKeys(uIPolokwaneCashHouseListItem, this.CloseCashHouseWithoutClosingCashDeskParams.UIPolokwaneCashHouseListItemSendKeys, ModifierKeys.None);

            // Type 'R 10 000' in 'E.g. R123.45' text box
            uIEgR12345Edit.Text = this.CloseCashHouseWithoutClosingCashDeskParams.UIEgR12345EditText;

            // Type '{Tab}' in 'E.g. R123.45' text box
            Keyboard.SendKeys(uIEgR12345Edit, this.CloseCashHouseWithoutClosingCashDeskParams.UIEgR12345EditSendKeys, ModifierKeys.None);

            // Type 'test' in 'E.g. Reason for any deficit' text box
            uIEgReasonforanydeficiEdit.Text = this.CloseCashHouseWithoutClosingCashDeskParams.UIEgReasonforanydeficiEditText;

            // Type '{Tab}' in 'E.g. Reason for any deficit' text box
            Keyboard.SendKeys(uIEgReasonforanydeficiEdit, this.CloseCashHouseWithoutClosingCashDeskParams.UIEgReasonforanydeficiEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Close Cash House ' button
            Keyboard.SendKeys(uICloseCashHouseButton, this.CloseCashHouseWithoutClosingCashDeskParams.UICloseCashHouseButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// OpenCashDesk - Use 'OpenCashDeskParams' to pass parameters into this method.
        /// </summary>
        public void OpenCashDesk()
        {
            #region Variable Declarations
            WinHyperlink uICashierHyperlink = this.UIAdjuvantQACashierMozWindow.UICashierHomeDepositReListItem.UICashierHyperlink;
            WinHyperlink uICashierHyperlink1 = this.UIAdjuvantQACashierMozWindow.UICashierListItem.UICashierHyperlink;
            WinEdit uIOpenCashDeskEdit = this.UIAdjuvantQACashierMozWindow.UIOpenCashDeskHyperlink.UIOpenCashDeskEdit;
            WinEdit uIEgOpeningcashdeskwitEdit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEgOpeningcashdeskwitEdit;
            WinEdit uIEgR12345Edit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEgR12345Edit;
            WinControl uISelectAgreementTypefMenuButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UISelectAgreementTypefMenuButton;
            WinControl uISelectCashHousefocusMenuButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UISelectCashHousefocusMenuButton;
            WinListItem uIPolokwaneCashHouseListItem = this.UIAdjuvantQACashierMozWindow.UISelectCashHouseEdit.UIPolokwaneCashHouseListItem;
            WinButton uIOpenDeskButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIOpenDeskButton;
            #endregion

            // Click ' Cashier ' link
            Mouse.Click(uICashierHyperlink, new Point(216, 15));

            // Click ' Cashier ' link
            Mouse.Click(uICashierHyperlink1, new Point(201, 22));

            // Click 'Open Cash Desk' text box
            Mouse.Click(uIOpenCashDeskEdit, new Point(43, 17));

            // Type 'Shift + {Tab}' in 'E.g. Opening cash desk with deficit from previous ...' text box
            Keyboard.SendKeys(uIEgOpeningcashdeskwitEdit, this.OpenCashDeskParams.UIEgOpeningcashdeskwitEditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Tab}' in 'E.g. R123.45' text box
            Keyboard.SendKeys(uIEgR12345Edit, this.OpenCashDeskParams.UIEgR12345EditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Tab}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.OpenCashDeskParams.UISelectAgreementTypefMenuButtonSendKeys, ModifierKeys.Shift);

            // Type '{Down}' in 'Select Cash House focus' MenuButton
            Keyboard.SendKeys(uISelectCashHousefocusMenuButton, this.OpenCashDeskParams.UISelectCashHousefocusMenuButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Polokwane Cash House' list item
            Keyboard.SendKeys(uIPolokwaneCashHouseListItem, this.OpenCashDeskParams.UIPolokwaneCashHouseListItemSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Select Cash House focus' MenuButton
            Keyboard.SendKeys(uISelectCashHousefocusMenuButton, this.OpenCashDeskParams.UISelectCashHousefocusMenuButtonSendKeys1, ModifierKeys.None);

            // Type '{Tab}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.OpenCashDeskParams.UISelectAgreementTypefMenuButtonSendKeys1, ModifierKeys.None);

            // Type 'R 100 000' in 'E.g. R123.45' text box
            uIEgR12345Edit.Text = this.OpenCashDeskParams.UIEgR12345EditText;

            // Type '{Tab}' in 'E.g. R123.45' text box
            Keyboard.SendKeys(uIEgR12345Edit, this.OpenCashDeskParams.UIEgR12345EditSendKeys1, ModifierKeys.None);

            // Type 'tresting' in 'E.g. Opening cash desk with deficit from previous ...' text box
            uIEgOpeningcashdeskwitEdit.Text = this.OpenCashDeskParams.UIEgOpeningcashdeskwitEditText;

            // Type '{Tab}' in 'E.g. Opening cash desk with deficit from previous ...' text box
            Keyboard.SendKeys(uIEgOpeningcashdeskwitEdit, this.OpenCashDeskParams.UIEgOpeningcashdeskwitEditSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in 'Open Desk ' button
            Keyboard.SendKeys(uIOpenDeskButton, this.OpenCashDeskParams.UIOpenDeskButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinHyperlink uICashierHyperlink = this.UIAdjuvantQACashierMozWindow.UICashierListItem.UICashierHyperlink;
            WinEdit uIOpenCashHouseEdit = this.UIAdjuvantQACashierMozWindow.UIOpenCashHouseHyperlink.UIOpenCashHouseEdit;
            WinEdit uIPleaseprovidenotesEdit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIPleaseprovidenotesEdit;
            WinEdit uIEg30050Edit = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIEg30050Edit;
            WinControl uISelectAgreementTypefMenuButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UISelectAgreementTypefMenuButton;
            WinListItem uIPolokwaneCashHouseListItem = this.UIAdjuvantQACashierMozWindow.UISelectAgreementTypeEdit.UIPolokwaneCashHouseListItem;
            WinEdit uIOpenCashHouseEdit1 = this.UIAdjuvantQACashierMozWindow.UIOpenCashHouseButton.UIOpenCashHouseEdit;
            WinButton uIOpenCashHouseButton = this.UIAdjuvantQACashierMozWindow.UIAdjuvantQACashierDocument.UIOpenCashHouseButton;
            #endregion

            // Click ' Cashier ' link
            Mouse.Click(uICashierHyperlink, new Point(165, 18));

            // Last mouse action was not recorded.

            // Click 'Open Cash House' text box
            Mouse.Click(uIOpenCashHouseEdit, new Point(77, 10));

            // Right-Click 'Open Cash House' text box
            Mouse.Click(uIOpenCashHouseEdit, MouseButtons.Right, ModifierKeys.None, new Point(77, 8));

            // Click 'Open Cash House' text box
            Mouse.Click(uIOpenCashHouseEdit, new Point(64, 7));

            // Type 'Shift + {Tab}' in 'Please provide notes...' text box
            Keyboard.SendKeys(uIPleaseprovidenotesEdit, this.RecordedMethod1Params.UIPleaseprovidenotesEditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Tab}' in 'E.g. 300.50' text box
            Keyboard.SendKeys(uIEg30050Edit, this.RecordedMethod1Params.UIEg30050EditSendKeys, ModifierKeys.Shift);

            // Type '{Down}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.RecordedMethod1Params.UISelectAgreementTypefMenuButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Polokwane Cash House' list item
            Keyboard.SendKeys(uIPolokwaneCashHouseListItem, this.RecordedMethod1Params.UIPolokwaneCashHouseListItemSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Select Agreement Type focus' MenuButton
            Keyboard.SendKeys(uISelectAgreementTypefMenuButton, this.RecordedMethod1Params.UISelectAgreementTypefMenuButtonSendKeys1, ModifierKeys.None);

            // Type 'R 4' in 'E.g. 300.50' text box
            uIEg30050Edit.Text = this.RecordedMethod1Params.UIEg30050EditText;

            // Type '{Tab}' in 'E.g. 300.50' text box
            Keyboard.SendKeys(uIEg30050Edit, this.RecordedMethod1Params.UIEg30050EditSendKeys1, ModifierKeys.None);

            // Type 'test' in 'Please provide notes...' text box
            uIPleaseprovidenotesEdit.Text = this.RecordedMethod1Params.UIPleaseprovidenotesEditText;

            // Click 'Open Cash House' text box
            Mouse.Click(uIOpenCashHouseEdit1, new Point(8, 15));

            // Type '{Tab}' in 'Please provide notes...' text box
            Keyboard.SendKeys(uIPleaseprovidenotesEdit, this.RecordedMethod1Params.UIPleaseprovidenotesEditSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in 'Open Cash House ' button
            Keyboard.SendKeys(uIOpenCashHouseButton, this.RecordedMethod1Params.UIOpenCashHouseButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinControl uIAdjuvantQAHomeGoogleApplication = this.UIAdjuvantQAHomeGoogleWindow.UIAdjuvantQAHomeGoogleApplication;
            WinControl uIAdjuvantQACashierGooApplication = this.UIAdjuvantQAHomeGoogleWindow.UIAdjuvantQACashierGooApplication;
            WinControl uIChromeLegacyWindowDocument = this.UIAdjuvantQAHomeGoogleWindow.UIChromeLegacyWindowWindow.UIChromeLegacyWindowDocument;
            #endregion

            // Click 'Adjuvant QA | Home - Google Chrome' Application
            Mouse.Click(uIAdjuvantQAHomeGoogleApplication, new Point(142, 206));

            // Click 'Adjuvant QA | Home - Google Chrome' Application
            Mouse.Click(uIAdjuvantQAHomeGoogleApplication, new Point(134, 615));

            // Click 'Adjuvant QA | Cashier - Google Chrome' Application
            Mouse.Click(uIAdjuvantQACashierGooApplication, new Point(357, 528));

            // Click 'Adjuvant QA | Cashier - Google Chrome' Application
            Mouse.Click(uIAdjuvantQACashierGooApplication, new Point(326, 365));

            // Type '{Tab}' in 'Chrome Legacy Window' document
            Keyboard.SendKeys(uIChromeLegacyWindowDocument, this.RecordedMethod2Params.UIChromeLegacyWindowDocumentSendKeys, ModifierKeys.None);
        }
        
        #region Properties
        public virtual NegativeLoginParams NegativeLoginParams
        {
            get
            {
                if ((this.mNegativeLoginParams == null))
                {
                    this.mNegativeLoginParams = new NegativeLoginParams();
                }
                return this.mNegativeLoginParams;
            }
        }
        
        public virtual OpenCashHouseParams OpenCashHouseParams
        {
            get
            {
                if ((this.mOpenCashHouseParams == null))
                {
                    this.mOpenCashHouseParams = new OpenCashHouseParams();
                }
                return this.mOpenCashHouseParams;
            }
        }
        
        public virtual OpenCashHouse1Params OpenCashHouse1Params
        {
            get
            {
                if ((this.mOpenCashHouse1Params == null))
                {
                    this.mOpenCashHouse1Params = new OpenCashHouse1Params();
                }
                return this.mOpenCashHouse1Params;
            }
        }
        
        public virtual CloseCashHouseWithoutClosingCashDeskParams CloseCashHouseWithoutClosingCashDeskParams
        {
            get
            {
                if ((this.mCloseCashHouseWithoutClosingCashDeskParams == null))
                {
                    this.mCloseCashHouseWithoutClosingCashDeskParams = new CloseCashHouseWithoutClosingCashDeskParams();
                }
                return this.mCloseCashHouseWithoutClosingCashDeskParams;
            }
        }
        
        public virtual OpenCashDeskParams OpenCashDeskParams
        {
            get
            {
                if ((this.mOpenCashDeskParams == null))
                {
                    this.mOpenCashDeskParams = new OpenCashDeskParams();
                }
                return this.mOpenCashDeskParams;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public UILoginMozillaFirefoxWindow UILoginMozillaFirefoxWindow
        {
            get
            {
                if ((this.mUILoginMozillaFirefoxWindow == null))
                {
                    this.mUILoginMozillaFirefoxWindow = new UILoginMozillaFirefoxWindow();
                }
                return this.mUILoginMozillaFirefoxWindow;
            }
        }
        
        public UISelectSecurityScopeMWindow UISelectSecurityScopeMWindow
        {
            get
            {
                if ((this.mUISelectSecurityScopeMWindow == null))
                {
                    this.mUISelectSecurityScopeMWindow = new UISelectSecurityScopeMWindow();
                }
                return this.mUISelectSecurityScopeMWindow;
            }
        }
        
        public UIAdjuvantQAHomeOperaWindow UIAdjuvantQAHomeOperaWindow
        {
            get
            {
                if ((this.mUIAdjuvantQAHomeOperaWindow == null))
                {
                    this.mUIAdjuvantQAHomeOperaWindow = new UIAdjuvantQAHomeOperaWindow();
                }
                return this.mUIAdjuvantQAHomeOperaWindow;
            }
        }
        
        public UIAdjuvantQAHomeMozillWindow UIAdjuvantQAHomeMozillWindow
        {
            get
            {
                if ((this.mUIAdjuvantQAHomeMozillWindow == null))
                {
                    this.mUIAdjuvantQAHomeMozillWindow = new UIAdjuvantQAHomeMozillWindow();
                }
                return this.mUIAdjuvantQAHomeMozillWindow;
            }
        }
        
        public UIAdjuvantQACashierMozWindow UIAdjuvantQACashierMozWindow
        {
            get
            {
                if ((this.mUIAdjuvantQACashierMozWindow == null))
                {
                    this.mUIAdjuvantQACashierMozWindow = new UIAdjuvantQACashierMozWindow();
                }
                return this.mUIAdjuvantQACashierMozWindow;
            }
        }
        
        public UIAdjuvantQAHomeGoogleWindow UIAdjuvantQAHomeGoogleWindow
        {
            get
            {
                if ((this.mUIAdjuvantQAHomeGoogleWindow == null))
                {
                    this.mUIAdjuvantQAHomeGoogleWindow = new UIAdjuvantQAHomeGoogleWindow();
                }
                return this.mUIAdjuvantQAHomeGoogleWindow;
            }
        }
        #endregion
        
        #region Fields
        private NegativeLoginParams mNegativeLoginParams;
        
        private OpenCashHouseParams mOpenCashHouseParams;
        
        private OpenCashHouse1Params mOpenCashHouse1Params;
        
        private CloseCashHouseWithoutClosingCashDeskParams mCloseCashHouseWithoutClosingCashDeskParams;
        
        private OpenCashDeskParams mOpenCashDeskParams;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private UILoginMozillaFirefoxWindow mUILoginMozillaFirefoxWindow;
        
        private UISelectSecurityScopeMWindow mUISelectSecurityScopeMWindow;
        
        private UIAdjuvantQAHomeOperaWindow mUIAdjuvantQAHomeOperaWindow;
        
        private UIAdjuvantQAHomeMozillWindow mUIAdjuvantQAHomeMozillWindow;
        
        private UIAdjuvantQACashierMozWindow mUIAdjuvantQACashierMozWindow;
        
        private UIAdjuvantQAHomeGoogleWindow mUIAdjuvantQAHomeGoogleWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NegativeLogin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class NegativeLoginParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'anes.harris@fgxplatform.com' in 'Username' text box
        /// </summary>
        public string UIUsernameEditText = "anes.harris@fgxplatform.com";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "G1y5Fs48upT2IbMnGvkibg9x+5lAZ+Qk";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenCashHouse'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class OpenCashHouseParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Tab}' in 'Adjuvant QA | Cashier' document
        /// </summary>
        public string UIAdjuvantQACashierDocumentSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Down}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Enter}' in 'Polokwane Cash House' list item
        /// </summary>
        public string UIPolokwaneCashHouseListItemSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Tab}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'R 1 000 644' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditText = "R 1 000 644";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Please provide notes...' text box
        /// </summary>
        public string UIPleaseprovidenotesEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Open Cash House ' button
        /// </summary>
        public string UIOpenCashHouseButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenCashHouse1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class OpenCashHouse1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Tab}' in 'Please provide notes...' text box
        /// </summary>
        public string UIPleaseprovidenotesEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Shift + {Tab}' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Down}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Enter}' in 'Polokwane Cash House' list item
        /// </summary>
        public string UIPolokwaneCashHouseListItemSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Tab}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'R 10 000' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditText = "R 10 000";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'test' in 'Please provide notes...' text box
        /// </summary>
        public string UIPleaseprovidenotesEditText = "test";
        
        /// <summary>
        /// Type '{Tab}' in 'Please provide notes...' text box
        /// </summary>
        public string UIPleaseprovidenotesEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Open Cash House ' button
        /// </summary>
        public string UIOpenCashHouseButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseCashHouseWithoutClosingCashDesk'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CloseCashHouseWithoutClosingCashDeskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Tab}' in 'Adjuvant QA | Cashier' document
        /// </summary>
        public string UIAdjuvantQACashierDocumentSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Down}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Enter}' in 'Polokwane Cash House' list item
        /// </summary>
        public string UIPolokwaneCashHouseListItemSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'R 10 000' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditText = "R 10 000";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'test' in 'E.g. Reason for any deficit' text box
        /// </summary>
        public string UIEgReasonforanydeficiEditText = "test";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. Reason for any deficit' text box
        /// </summary>
        public string UIEgReasonforanydeficiEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Close Cash House ' button
        /// </summary>
        public string UICloseCashHouseButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenCashDesk'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class OpenCashDeskParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Tab}' in 'E.g. Opening cash desk with deficit from previous ...' text box
        /// </summary>
        public string UIEgOpeningcashdeskwitEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Shift + {Tab}' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Shift + {Tab}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Down}' in 'Select Cash House focus' MenuButton
        /// </summary>
        public string UISelectCashHousefocusMenuButtonSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Enter}' in 'Polokwane Cash House' list item
        /// </summary>
        public string UIPolokwaneCashHouseListItemSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Tab}' in 'Select Cash House focus' MenuButton
        /// </summary>
        public string UISelectCashHousefocusMenuButtonSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'R 100 000' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditText = "R 100 000";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. R123.45' text box
        /// </summary>
        public string UIEgR12345EditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'tresting' in 'E.g. Opening cash desk with deficit from previous ...' text box
        /// </summary>
        public string UIEgOpeningcashdeskwitEditText = "tresting";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. Opening cash desk with deficit from previous ...' text box
        /// </summary>
        public string UIEgOpeningcashdeskwitEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Open Desk ' button
        /// </summary>
        public string UIOpenDeskButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Tab}' in 'Please provide notes...' text box
        /// </summary>
        public string UIPleaseprovidenotesEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Shift + {Tab}' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Down}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Enter}' in 'Polokwane Cash House' list item
        /// </summary>
        public string UIPolokwaneCashHouseListItemSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Tab}' in 'Select Agreement Type focus' MenuButton
        /// </summary>
        public string UISelectAgreementTypefMenuButtonSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'R 4' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditText = "R 4";
        
        /// <summary>
        /// Type '{Tab}' in 'E.g. 300.50' text box
        /// </summary>
        public string UIEg30050EditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'test' in 'Please provide notes...' text box
        /// </summary>
        public string UIPleaseprovidenotesEditText = "test";
        
        /// <summary>
        /// Type '{Tab}' in 'Please provide notes...' text box
        /// </summary>
        public string UIPleaseprovidenotesEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Open Cash House ' button
        /// </summary>
        public string UIOpenCashHouseButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Tab}' in 'Chrome Legacy Window' document
        /// </summary>
        public string UIChromeLegacyWindowDocumentSendKeys = "{Tab}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginMozillaFirefoxWindow : WinWindow
    {
        
        public UILoginMozillaFirefoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "| Log in - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("| Log in - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UILoginDocument UILoginDocument
        {
            get
            {
                if ((this.mUILoginDocument == null))
                {
                    this.mUILoginDocument = new UILoginDocument(this);
                }
                return this.mUILoginDocument;
            }
        }
        #endregion
        
        #region Fields
        private UILoginDocument mUILoginDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginDocument : WinControl
    {
        
        public UILoginDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "| Log in";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("| Log in - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Username";
                    this.mUIUsernameEdit.WindowTitles.Add("| Log in - Mozilla Firefox");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public WinEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.WindowTitles.Add("| Log in - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public WinButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WinButton.PropertyNames.Name] = "Login";
                    this.mUILoginButton.WindowTitles.Add("| Log in - Mozilla Firefox");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUsernameEdit;
        
        private WinEdit mUIPasswordEdit;
        
        private WinButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectSecurityScopeMWindow : WinWindow
    {
        
        public UISelectSecurityScopeMWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "| Select Security Scope - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("| Select Security Scope - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UISelectSecurityScopeDocument UISelectSecurityScopeDocument
        {
            get
            {
                if ((this.mUISelectSecurityScopeDocument == null))
                {
                    this.mUISelectSecurityScopeDocument = new UISelectSecurityScopeDocument(this);
                }
                return this.mUISelectSecurityScopeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UISelectSecurityScopeDocument mUISelectSecurityScopeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectSecurityScopeDocument : WinControl
    {
        
        public UISelectSecurityScopeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "| Select Security Scope";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("| Select Security Scope - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UIFinishButton
        {
            get
            {
                if ((this.mUIFinishButton == null))
                {
                    this.mUIFinishButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFinishButton.SearchProperties[WinButton.PropertyNames.Name] = "Finish";
                    this.mUIFinishButton.WindowTitles.Add("| Select Security Scope - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinishButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFinishButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAdjuvantQAHomeOperaWindow : WinWindow
    {
        
        public UIAdjuvantQAHomeOperaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Adjuvant QA | Home - Opera";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("Adjuvant QA | Home - Opera");
            #endregion
        }
        
        #region Properties
        public WinControl UIAdjuvantQAHomeOperaApplication
        {
            get
            {
                if ((this.mUIAdjuvantQAHomeOperaApplication == null))
                {
                    this.mUIAdjuvantQAHomeOperaApplication = new WinControl(this);
                    #region Search Criteria
                    this.mUIAdjuvantQAHomeOperaApplication.SearchProperties[UITestControl.PropertyNames.Name] = "Adjuvant QA | Home - Opera";
                    this.mUIAdjuvantQAHomeOperaApplication.SearchProperties[UITestControl.PropertyNames.ControlType] = "Application";
                    this.mUIAdjuvantQAHomeOperaApplication.WindowTitles.Add("Adjuvant QA | Home - Opera");
                    #endregion
                }
                return this.mUIAdjuvantQAHomeOperaApplication;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIAdjuvantQAHomeOperaApplication;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAdjuvantQAHomeMozillWindow : WinWindow
    {
        
        public UIAdjuvantQAHomeMozillWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Adjuvant QA | Home - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Adjuvant QA | Home - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UICashierHyperlink UICashierHyperlink
        {
            get
            {
                if ((this.mUICashierHyperlink == null))
                {
                    this.mUICashierHyperlink = new UICashierHyperlink(this);
                }
                return this.mUICashierHyperlink;
            }
        }
        
        public UIOpenCashDeskHyperlink UIOpenCashDeskHyperlink
        {
            get
            {
                if ((this.mUIOpenCashDeskHyperlink == null))
                {
                    this.mUIOpenCashDeskHyperlink = new UIOpenCashDeskHyperlink(this);
                }
                return this.mUIOpenCashDeskHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private UICashierHyperlink mUICashierHyperlink;
        
        private UIOpenCashDeskHyperlink mUIOpenCashDeskHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICashierHyperlink : WinHyperlink
    {
        
        public UICashierHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = " Cashier ";
            this.WindowTitles.Add("Adjuvant QA | Home - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UICashierEdit
        {
            get
            {
                if ((this.mUICashierEdit == null))
                {
                    this.mUICashierEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICashierEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cashier";
                    this.mUICashierEdit.WindowTitles.Add("Adjuvant QA | Home - Mozilla Firefox");
                    #endregion
                }
                return this.mUICashierEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICashierEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenCashDeskHyperlink : WinHyperlink
    {
        
        public UIOpenCashDeskHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = " Open Cash Desk";
            this.WindowTitles.Add("Adjuvant QA | Home - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenCashDeskEdit
        {
            get
            {
                if ((this.mUIOpenCashDeskEdit == null))
                {
                    this.mUIOpenCashDeskEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenCashDeskEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open Cash Desk";
                    this.mUIOpenCashDeskEdit.WindowTitles.Add("Adjuvant QA | Home - Mozilla Firefox");
                    #endregion
                }
                return this.mUIOpenCashDeskEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenCashDeskEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAdjuvantQACashierMozWindow : WinWindow
    {
        
        public UIAdjuvantQACashierMozWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Adjuvant QA | Cashier - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIOpenCashHouseHyperlink UIOpenCashHouseHyperlink
        {
            get
            {
                if ((this.mUIOpenCashHouseHyperlink == null))
                {
                    this.mUIOpenCashHouseHyperlink = new UIOpenCashHouseHyperlink(this);
                }
                return this.mUIOpenCashHouseHyperlink;
            }
        }
        
        public UIJohanrmmscozaChangeSListItem UIJohanrmmscozaChangeSListItem
        {
            get
            {
                if ((this.mUIJohanrmmscozaChangeSListItem == null))
                {
                    this.mUIJohanrmmscozaChangeSListItem = new UIJohanrmmscozaChangeSListItem(this);
                }
                return this.mUIJohanrmmscozaChangeSListItem;
            }
        }
        
        public UIItemPropertyPage UIItemPropertyPage
        {
            get
            {
                if ((this.mUIItemPropertyPage == null))
                {
                    this.mUIItemPropertyPage = new UIItemPropertyPage(this);
                }
                return this.mUIItemPropertyPage;
            }
        }
        
        public UIAdjuvantQACashierDocument UIAdjuvantQACashierDocument
        {
            get
            {
                if ((this.mUIAdjuvantQACashierDocument == null))
                {
                    this.mUIAdjuvantQACashierDocument = new UIAdjuvantQACashierDocument(this);
                }
                return this.mUIAdjuvantQACashierDocument;
            }
        }
        
        public UISelectAgreementTypeEdit UISelectAgreementTypeEdit
        {
            get
            {
                if ((this.mUISelectAgreementTypeEdit == null))
                {
                    this.mUISelectAgreementTypeEdit = new UISelectAgreementTypeEdit(this);
                }
                return this.mUISelectAgreementTypeEdit;
            }
        }
        
        public UICashierListItem UICashierListItem
        {
            get
            {
                if ((this.mUICashierListItem == null))
                {
                    this.mUICashierListItem = new UICashierListItem(this);
                }
                return this.mUICashierListItem;
            }
        }
        
        public UICloseCashHouseHyperlink UICloseCashHouseHyperlink
        {
            get
            {
                if ((this.mUICloseCashHouseHyperlink == null))
                {
                    this.mUICloseCashHouseHyperlink = new UICloseCashHouseHyperlink(this);
                }
                return this.mUICloseCashHouseHyperlink;
            }
        }
        
        public UICashHouseText UICashHouseText
        {
            get
            {
                if ((this.mUICashHouseText == null))
                {
                    this.mUICashHouseText = new UICashHouseText(this);
                }
                return this.mUICashHouseText;
            }
        }
        
        public UICashierHomeDepositReListItem UICashierHomeDepositReListItem
        {
            get
            {
                if ((this.mUICashierHomeDepositReListItem == null))
                {
                    this.mUICashierHomeDepositReListItem = new UICashierHomeDepositReListItem(this);
                }
                return this.mUICashierHomeDepositReListItem;
            }
        }
        
        public UIOpenCashDeskHyperlink1 UIOpenCashDeskHyperlink
        {
            get
            {
                if ((this.mUIOpenCashDeskHyperlink == null))
                {
                    this.mUIOpenCashDeskHyperlink = new UIOpenCashDeskHyperlink1(this);
                }
                return this.mUIOpenCashDeskHyperlink;
            }
        }
        
        public UISelectCashHouseEdit UISelectCashHouseEdit
        {
            get
            {
                if ((this.mUISelectCashHouseEdit == null))
                {
                    this.mUISelectCashHouseEdit = new UISelectCashHouseEdit(this);
                }
                return this.mUISelectCashHouseEdit;
            }
        }
        
        public UIOpenCashHouseButton UIOpenCashHouseButton
        {
            get
            {
                if ((this.mUIOpenCashHouseButton == null))
                {
                    this.mUIOpenCashHouseButton = new UIOpenCashHouseButton(this);
                }
                return this.mUIOpenCashHouseButton;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenCashHouseHyperlink mUIOpenCashHouseHyperlink;
        
        private UIJohanrmmscozaChangeSListItem mUIJohanrmmscozaChangeSListItem;
        
        private UIItemPropertyPage mUIItemPropertyPage;
        
        private UIAdjuvantQACashierDocument mUIAdjuvantQACashierDocument;
        
        private UISelectAgreementTypeEdit mUISelectAgreementTypeEdit;
        
        private UICashierListItem mUICashierListItem;
        
        private UICloseCashHouseHyperlink mUICloseCashHouseHyperlink;
        
        private UICashHouseText mUICashHouseText;
        
        private UICashierHomeDepositReListItem mUICashierHomeDepositReListItem;
        
        private UIOpenCashDeskHyperlink1 mUIOpenCashDeskHyperlink;
        
        private UISelectCashHouseEdit mUISelectCashHouseEdit;
        
        private UIOpenCashHouseButton mUIOpenCashHouseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenCashHouseHyperlink : WinHyperlink
    {
        
        public UIOpenCashHouseHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = " Open Cash House";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenCashHouseEdit
        {
            get
            {
                if ((this.mUIOpenCashHouseEdit == null))
                {
                    this.mUIOpenCashHouseEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenCashHouseEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open Cash House";
                    this.mUIOpenCashHouseEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIOpenCashHouseEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenCashHouseEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIJohanrmmscozaChangeSListItem : WinListItem
    {
        
        public UIJohanrmmscozaChangeSListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = " johan@rmms.co.za Change ScopeManage Account";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UIJohanrmmscozaHyperlink
        {
            get
            {
                if ((this.mUIJohanrmmscozaHyperlink == null))
                {
                    this.mUIJohanrmmscozaHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIJohanrmmscozaHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = " johan@rmms.co.za ";
                    this.mUIJohanrmmscozaHyperlink.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIJohanrmmscozaHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUIJohanrmmscozaHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemPropertyPage : WinControl
    {
        
        public UIItemPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinControl UIAdjuvantQACashierDocument
        {
            get
            {
                if ((this.mUIAdjuvantQACashierDocument == null))
                {
                    this.mUIAdjuvantQACashierDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUIAdjuvantQACashierDocument.SearchProperties[UITestControl.PropertyNames.Name] = "Adjuvant QA | Cashier";
                    this.mUIAdjuvantQACashierDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIAdjuvantQACashierDocument.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIAdjuvantQACashierDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIAdjuvantQACashierDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAdjuvantQACashierDocument : WinControl
    {
        
        public UIAdjuvantQACashierDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Adjuvant QA | Cashier";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinControl UISelectAgreementTypefMenuButton
        {
            get
            {
                if ((this.mUISelectAgreementTypefMenuButton == null))
                {
                    this.mUISelectAgreementTypefMenuButton = new WinControl(this);
                    #region Search Criteria
                    this.mUISelectAgreementTypefMenuButton.SearchProperties[UITestControl.PropertyNames.Name] = "Select Agreement Type focus";
                    this.mUISelectAgreementTypefMenuButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "MenuButton";
                    this.mUISelectAgreementTypefMenuButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUISelectAgreementTypefMenuButton;
            }
        }
        
        public WinEdit UIEg30050Edit
        {
            get
            {
                if ((this.mUIEg30050Edit == null))
                {
                    this.mUIEg30050Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEg30050Edit.SearchProperties[WinEdit.PropertyNames.Name] = "E.g. 300.50";
                    this.mUIEg30050Edit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEg30050Edit;
            }
        }
        
        public WinEdit UIPleaseprovidenotesEdit
        {
            get
            {
                if ((this.mUIPleaseprovidenotesEdit == null))
                {
                    this.mUIPleaseprovidenotesEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPleaseprovidenotesEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Please provide notes...";
                    this.mUIPleaseprovidenotesEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPleaseprovidenotesEdit;
            }
        }
        
        public WinButton UIOpenCashHouseButton
        {
            get
            {
                if ((this.mUIOpenCashHouseButton == null))
                {
                    this.mUIOpenCashHouseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenCashHouseButton.SearchProperties[WinButton.PropertyNames.Name] = "Open Cash House ";
                    this.mUIOpenCashHouseButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIOpenCashHouseButton;
            }
        }
        
        public WinEdit UIEgR12345Edit
        {
            get
            {
                if ((this.mUIEgR12345Edit == null))
                {
                    this.mUIEgR12345Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEgR12345Edit.SearchProperties[WinEdit.PropertyNames.Name] = "E.g. R123.45";
                    this.mUIEgR12345Edit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEgR12345Edit;
            }
        }
        
        public WinEdit UIEgReasonforanydeficiEdit
        {
            get
            {
                if ((this.mUIEgReasonforanydeficiEdit == null))
                {
                    this.mUIEgReasonforanydeficiEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEgReasonforanydeficiEdit.SearchProperties[WinEdit.PropertyNames.Name] = "E.g. Reason for any deficit";
                    this.mUIEgReasonforanydeficiEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEgReasonforanydeficiEdit;
            }
        }
        
        public WinButton UICloseCashHouseButton
        {
            get
            {
                if ((this.mUICloseCashHouseButton == null))
                {
                    this.mUICloseCashHouseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseCashHouseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close Cash House ";
                    this.mUICloseCashHouseButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUICloseCashHouseButton;
            }
        }
        
        public WinEdit UIEgOpeningcashdeskwitEdit
        {
            get
            {
                if ((this.mUIEgOpeningcashdeskwitEdit == null))
                {
                    this.mUIEgOpeningcashdeskwitEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEgOpeningcashdeskwitEdit.SearchProperties[WinEdit.PropertyNames.Name] = "E.g. Opening cash desk with deficit from previous session";
                    this.mUIEgOpeningcashdeskwitEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEgOpeningcashdeskwitEdit;
            }
        }
        
        public WinControl UISelectCashHousefocusMenuButton
        {
            get
            {
                if ((this.mUISelectCashHousefocusMenuButton == null))
                {
                    this.mUISelectCashHousefocusMenuButton = new WinControl(this);
                    #region Search Criteria
                    this.mUISelectCashHousefocusMenuButton.SearchProperties[UITestControl.PropertyNames.Name] = "Select Cash House focus";
                    this.mUISelectCashHousefocusMenuButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "MenuButton";
                    this.mUISelectCashHousefocusMenuButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUISelectCashHousefocusMenuButton;
            }
        }
        
        public WinButton UIOpenDeskButton
        {
            get
            {
                if ((this.mUIOpenDeskButton == null))
                {
                    this.mUIOpenDeskButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenDeskButton.SearchProperties[WinButton.PropertyNames.Name] = "Open Desk ";
                    this.mUIOpenDeskButton.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIOpenDeskButton;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUISelectAgreementTypefMenuButton;
        
        private WinEdit mUIEg30050Edit;
        
        private WinEdit mUIPleaseprovidenotesEdit;
        
        private WinButton mUIOpenCashHouseButton;
        
        private WinEdit mUIEgR12345Edit;
        
        private WinEdit mUIEgReasonforanydeficiEdit;
        
        private WinButton mUICloseCashHouseButton;
        
        private WinEdit mUIEgOpeningcashdeskwitEdit;
        
        private WinControl mUISelectCashHousefocusMenuButton;
        
        private WinButton mUIOpenDeskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectAgreementTypeEdit : WinEdit
    {
        
        public UISelectAgreementTypeEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Select Agreement Type";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinListItem UIPolokwaneCashHouseListItem
        {
            get
            {
                if ((this.mUIPolokwaneCashHouseListItem == null))
                {
                    this.mUIPolokwaneCashHouseListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIPolokwaneCashHouseListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Polokwane Cash House";
                    this.mUIPolokwaneCashHouseListItem.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPolokwaneCashHouseListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIPolokwaneCashHouseListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICashierListItem : WinListItem
    {
        
        public UICashierListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = " Cashier ";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UICashierHyperlink
        {
            get
            {
                if ((this.mUICashierHyperlink == null))
                {
                    this.mUICashierHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUICashierHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = " Cashier ";
                    this.mUICashierHyperlink.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUICashierHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUICashierHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICloseCashHouseHyperlink : WinHyperlink
    {
        
        public UICloseCashHouseHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = " Close Cash House";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UICloseCashHouseEdit
        {
            get
            {
                if ((this.mUICloseCashHouseEdit == null))
                {
                    this.mUICloseCashHouseEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICloseCashHouseEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Close Cash House";
                    this.mUICloseCashHouseEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUICloseCashHouseEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICloseCashHouseEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICashHouseText : WinText
    {
        
        public UICashHouseText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Cash House *";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchProperties[WinEdit.PropertyNames.Name] = "*";
                    this.mUIItemEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WinEdit UICashHouseEdit
        {
            get
            {
                if ((this.mUICashHouseEdit == null))
                {
                    this.mUICashHouseEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICashHouseEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cash House ";
                    this.mUICashHouseEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUICashHouseEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        
        private WinEdit mUICashHouseEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICashierHomeDepositReListItem : WinListItem
    {
        
        public UICashierHomeDepositReListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = @" Cashier   Home Deposit Refund Reprint Slips Create Buyer Buyer Search Open Cash Desk Close Cash Desk Cash Drop Take Break End Break Open Cash House Close Cash House Bag Drop Manual Bag Drop Buyer Statement Buyer Sales Summary Invoice Report Cash house / Cash ups";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UICashierHyperlink
        {
            get
            {
                if ((this.mUICashierHyperlink == null))
                {
                    this.mUICashierHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUICashierHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = " Cashier ";
                    this.mUICashierHyperlink.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUICashierHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUICashierHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenCashDeskHyperlink1 : WinHyperlink
    {
        
        public UIOpenCashDeskHyperlink1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = " Open Cash Desk";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenCashDeskEdit
        {
            get
            {
                if ((this.mUIOpenCashDeskEdit == null))
                {
                    this.mUIOpenCashDeskEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenCashDeskEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open Cash Desk";
                    this.mUIOpenCashDeskEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIOpenCashDeskEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenCashDeskEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectCashHouseEdit : WinEdit
    {
        
        public UISelectCashHouseEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Select Cash House";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinListItem UIPolokwaneCashHouseListItem
        {
            get
            {
                if ((this.mUIPolokwaneCashHouseListItem == null))
                {
                    this.mUIPolokwaneCashHouseListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIPolokwaneCashHouseListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Polokwane Cash House";
                    this.mUIPolokwaneCashHouseListItem.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPolokwaneCashHouseListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIPolokwaneCashHouseListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenCashHouseButton : WinButton
    {
        
        public UIOpenCashHouseButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinButton.PropertyNames.Name] = "Open Cash House ";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenCashHouseEdit
        {
            get
            {
                if ((this.mUIOpenCashHouseEdit == null))
                {
                    this.mUIOpenCashHouseEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenCashHouseEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open Cash House ";
                    this.mUIOpenCashHouseEdit.WindowTitles.Add("Adjuvant QA | Cashier - Mozilla Firefox");
                    #endregion
                }
                return this.mUIOpenCashHouseEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenCashHouseEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAdjuvantQAHomeGoogleWindow : WinWindow
    {
        
        public UIAdjuvantQAHomeGoogleWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Adjuvant QA | Home - Google Chrome";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("Adjuvant QA | Home - Google Chrome");
            this.WindowTitles.Add("Adjuvant QA | Cashier - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinControl UIAdjuvantQAHomeGoogleApplication
        {
            get
            {
                if ((this.mUIAdjuvantQAHomeGoogleApplication == null))
                {
                    this.mUIAdjuvantQAHomeGoogleApplication = new WinControl(this);
                    #region Search Criteria
                    this.mUIAdjuvantQAHomeGoogleApplication.SearchProperties[UITestControl.PropertyNames.Name] = "Adjuvant QA | Home";
                    this.mUIAdjuvantQAHomeGoogleApplication.SearchProperties[UITestControl.PropertyNames.ControlType] = "Application";
                    this.mUIAdjuvantQAHomeGoogleApplication.WindowTitles.Add("Adjuvant QA | Home - Google Chrome");
                    #endregion
                }
                return this.mUIAdjuvantQAHomeGoogleApplication;
            }
        }
        
        public WinControl UIAdjuvantQACashierGooApplication
        {
            get
            {
                if ((this.mUIAdjuvantQACashierGooApplication == null))
                {
                    this.mUIAdjuvantQACashierGooApplication = new WinControl(this);
                    #region Search Criteria
                    this.mUIAdjuvantQACashierGooApplication.SearchProperties[UITestControl.PropertyNames.Name] = "Adjuvant QA | Cashier";
                    this.mUIAdjuvantQACashierGooApplication.SearchProperties[UITestControl.PropertyNames.ControlType] = "Application";
                    this.mUIAdjuvantQACashierGooApplication.WindowTitles.Add("Adjuvant QA | Cashier - Google Chrome");
                    #endregion
                }
                return this.mUIAdjuvantQACashierGooApplication;
            }
        }
        
        public UIChromeLegacyWindowWindow UIChromeLegacyWindowWindow
        {
            get
            {
                if ((this.mUIChromeLegacyWindowWindow == null))
                {
                    this.mUIChromeLegacyWindowWindow = new UIChromeLegacyWindowWindow(this);
                }
                return this.mUIChromeLegacyWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIAdjuvantQAHomeGoogleApplication;
        
        private WinControl mUIAdjuvantQACashierGooApplication;
        
        private UIChromeLegacyWindowWindow mUIChromeLegacyWindowWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIChromeLegacyWindowWindow : WinWindow
    {
        
        public UIChromeLegacyWindowWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "989921344";
            this.WindowTitles.Add("Adjuvant QA | Cashier - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinControl UIChromeLegacyWindowDocument
        {
            get
            {
                if ((this.mUIChromeLegacyWindowDocument == null))
                {
                    this.mUIChromeLegacyWindowDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUIChromeLegacyWindowDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIChromeLegacyWindowDocument.WindowTitles.Add("Adjuvant QA | Cashier - Google Chrome");
                    #endregion
                }
                return this.mUIChromeLegacyWindowDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIChromeLegacyWindowDocument;
        #endregion
    }
}
